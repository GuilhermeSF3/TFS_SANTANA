Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Text
Imports System.Web
Imports System.Web.UI
Imports System.Web.UI.WebControls
Imports System.Collections
Imports System.Data
Imports System.IO
Imports System.Resources


Imports Componentes.HierarcGrid


'<Designer("System.Web.UI.Design.WebControls.DataGridDesigner, System.Design, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner"), DefaultEvent("TemplateSelection"), DefaultProperty("TemplateCachingBase"), ToolboxData("<{0}:HierarGrid runat=server></{0}:HierarGrid>")> _


Namespace HierarcGrid
    ''' <summary>
    ''' The HierarGrid is a DataGrid-like control that is capable of displaying parent-child relations 
    ''' using templates to display the child elements.
    ''' </summary>
    ''' <example>
    ''' <code>
    ''' <![CDATA[
    ''' 	private void Page_Load(object sender, System.EventArgs e)
    '''		{
    '''			if(!IsPostBack)
    '''			{
    '''				DataSet ds = new DataSet();
    '''				ds.ReadXml(AppDomain.CurrentDomain.BaseDirectory + @"\Testdata.xml");
    '''
    '''				DataColumn dc1;
    '''				DataColumn dc2;
    '''				//Relation Title => Author
    '''				dc1 = ds.Tables[0].Columns["title_id"];
    '''				dc2 = ds.Tables[1].Columns["title_id"];
    '''				DataRelation dr = new DataRelation("Title_Author", dc1, dc2, false);
    '''				ds.Relations.Add(dr);
    '''
    '''				//Relation Title => Sales
    '''				dc1 = ds.Tables[0].Columns["title_id"];
    '''				dc2 = ds.Tables[2].Columns["title_id"];
    '''				dr = new DataRelation("Title_Sales", dc1, dc2, false);
    '''				ds.Relations.Add(dr);
    '''
    '''				HG1.DataSource = ds;
    '''				HG1.DataMember = "Titles";
    '''				HG1.DataBind();
    '''				HG1.RowExpanded[0] = true;
    '''			}
    '''		}
    ''' ]]>
    ''' </code>
    ''' </example>
    <DefaultEvent("TemplateSelection"), DefaultProperty("TemplateCachingBase"), ToolboxData("<{0}:HierarGrid runat=server></{0}:HierarGrid>")> _
    Public Class HierarGrid
        Inherits DataGrid
        Implements IPostBackDataHandler
        ''' <summary>
        ''' Name of the Hidden field that stores the ClientIDs of the expanded rows
        ''' </summary>
        Private Const EXPANDEDCLIENTIDS_HIDDENFIELDNAME As String = "HierarGrid_ExpandedIDs_"

        ''' <summary>
        ''' String used as a separator between the different ClientIDs in the hidden text field
        ''' Note: when changing this value please update the JavaScripts too (hardcoded)
        ''' </summary>
        Friend Const EXPANDEDCLIENTIDS_SEPARATOR As String = ", "

        ''' <summary>
        ''' Index of the HierarGridColumn
        ''' </summary>
        Private _hierarColumnID As Integer = -1

        ''' <summary>
        ''' Stores the cached filenames of the templates
        ''' </summary>
        Private ReadOnly cachingTable As New Hashtable()

        ''' <summary>
        ''' Stores the cached template data modes
        ''' </summary>
        Private ReadOnly tdmCachingTable As New Hashtable()

        ''' <summary>
        ''' Stores the number of columns included AutoGeneratedColumns
        ''' </summary>
        Private _columnCount As Integer = -1

#Region "Property: RowExpanded"
        Private _rowExpanded As RowStates

        ''' <summary>
        ''' Specifies whether a Row is expanded or collapsed
        ''' Please note that this property is only available after the Items collection is populated (usually after DataBind)
        ''' </summary>
        <Category("HierarGrid"), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)> _
        Public ReadOnly Property RowExpanded() As RowStates
            Get
                EnsureChildControls()
                If _rowExpanded Is Nothing Then
                    _rowExpanded = New RowStates(Me)
                End If

                Return _rowExpanded
            End Get
        End Property
#End Region

#Region "Property: ExpandedClientIDs"
        Private _expandedClientIDs As String = [String].Empty

        ''' <summary>
        ''' Specifies the ClientIDs of the expanded rows
        ''' </summary>
        Friend Property ExpandedClientIDs() As String
            Get
                Return _expandedClientIDs
            End Get
            Set(ByVal value As String)
                _expandedClientIDs = value
                'remove unnecessary EXPANDEDCLIENTIDS_SEPARATOR from the beginning, the end and doubles in the middle
                _expandedClientIDs = _expandedClientIDs.Replace(EXPANDEDCLIENTIDS_SEPARATOR & EXPANDEDCLIENTIDS_SEPARATOR, EXPANDEDCLIENTIDS_SEPARATOR)
                If _expandedClientIDs.StartsWith(EXPANDEDCLIENTIDS_SEPARATOR) Then
                    _expandedClientIDs = _expandedClientIDs.Remove(0, EXPANDEDCLIENTIDS_SEPARATOR.Length)
                End If
                If _expandedClientIDs.EndsWith(EXPANDEDCLIENTIDS_SEPARATOR) Then
                    _expandedClientIDs = _expandedClientIDs.Substring(0, _expandedClientIDs.Length - EXPANDEDCLIENTIDS_SEPARATOR.Length)
                End If
            End Set
        End Property
#End Region

#Region "Property: LoadControlMode"
        Private _loadControlMode As LoadControlModes = LoadControlModes.Template

        ''' <summary>
        ''' Specifies whether the template shall be loaded as a template using Page.LoadTemplate 
        ''' or as a UserControl using Page.LoadControl
        ''' </summary>
        <DefaultValue(LoadControlModes.Template), Category("HierarGrid")> _
        Public Property LoadControlMode() As LoadControlModes
            Get
                Return _loadControlMode
            End Get
            Set(ByVal value As LoadControlModes)
                _loadControlMode = value
            End Set
        End Property
#End Region

#Region "Property: TemplateDataMode"
        Private _templateDataMode As TemplateDataModes = TemplateDataModes.SingleRow

        ''' <summary>
        ''' Specifies whether to load one instance of the template for all child rows of a relation or to 
        ''' load one instance of the template for each child row or to defer the decision until run time.
        ''' You can use TemplateDataModes.Table if you want to display a DataGrid for multiple child rows - the
        ''' BindingContainer contains a DataSet
        ''' You can use TemplateDataModes.SingleRow if you want to display the templates multiple times for each child row
        ''' You can use TemplateDataModes.RunTime if you want to defer the decision of which template data mode to use
        ''' until runtime and base it on the particular data relation that is currently being displayed.
        ''' </summary>
        <DefaultValue(TemplateDataModes.SingleRow), Category("HierarGrid")> _
        Public Property TemplateDataMode() As TemplateDataModes
            Get
                Return _templateDataMode
            End Get
            Set(ByVal value As TemplateDataModes)
                _templateDataMode = value
            End Set
        End Property
#End Region

#Region "Property: TemplateCachingBase"
        Private _templateCachingBase As CachingBases = CachingBases.None

        ''' <summary>
        ''' Specifies whether the template filename shall be cached based on the name of the table or the
        ''' data of a <see cref="TemplateCachingColumn">specific column</see>
        ''' </summary>
        <DefaultValue(CachingBases.None), Category("HierarGrid")> _
        Public Property TemplateCachingBase() As CachingBases
            Get
                Return _templateCachingBase
            End Get
            Set(ByVal value As CachingBases)
                _templateCachingBase = value
            End Set
        End Property
#End Region

#Region "Property: TemplateCachingColumn"
        Private _templateCachingColumn As String

        ''' <summary>
        ''' Specifies the column name that is the basis for template filename <see cref="TemplateCachingBase">caching</see>
        ''' </summary>
        <Category("HierarGrid")> _
        Public Property TemplateCachingColumn() As String
            Get
                Return _templateCachingColumn
            End Get
            Set(ByVal value As String)
                _templateCachingColumn = value
            End Set
        End Property
#End Region

#Region "Event: TemplateSelection"
        ''' <summary>
        ''' Occurs when the HierarGrid finds a new child row for which there is no template filename in the cache table
        ''' You can use HierarGridTemplateSelectionEventArgs.Row to define which template shall be loaded and
        ''' return the filename in the HierarGridTemplateSelectionEventArgs.TemplateFilename property
        ''' <code>
        ''' <![CDATA[
        '''	private void HierarGrid_TemplateSelection(object sender, HierarGridTemplateSelectionEventArgs e)
        '''	{
        '''		e.TemplateFilename = "Templates\\" + e.Row.Table.TableName + ".ascx";
        '''	}
        ''' ]]>
        ''' </code>
        ''' </summary>
        Public Event TemplateSelection As HierarGridTemplateSelectionEventHandler
        ''' <summary>
        ''' Raises the <see cref="TemplateSelection">TemplateSelection</see> event
        ''' </summary>
        ''' <param name="e"></param>
        ''' <returns>returns true if at least one event handler is attached</returns>
        Protected Overridable Function OnTemplateSelection(ByVal e As HierarGridTemplateSelectionEventArgs) As Boolean
            RaiseEvent TemplateSelection(Me, e)
            Return True
        End Function
#End Region

#Region "Event: TemplateDataModeSelection"
        ''' <summary>
        ''' Occurs when the TemplateDataMode is set to runtime and HierarGrid finds a new DataRelation
        ''' for which it needs to determine the TemplateDataMode to use.
        ''' You can use HierarGridTemplateDataModeSelectionEventArgs.Relation to define which data mode the heirargrid
        ''' will use to load the particular template for the DataRelation.
        ''' return the template data mode in the HierarGridTemplateDataModeSelectionEventArgs.TemplateDataMode property
        ''' <code>
        ''' <![CDATA[
        '''	private void HierarGrid_TemplateDataModeSelection(object sender, HierarGridTemplateSelectionEventArgs e)
        '''	{
        '''		e.TemplateDataMode = TemplateDataModes.SingleRow;
        '''	}
        ''' ]]>
        ''' </code>
        ''' </summary>
        Public Event TemplateDataModeSelection As HierarGridTemplateDataModeSelectionEventHandler
        ''' <summary>
        ''' Raises the <see cref="TemplateDataModeSelection">TemplateDataModeSelection</see> event
        ''' </summary>
        ''' <param name="e"></param>
        ''' <returns>returns true if at least one event handler is attached</returns>
        Protected Overridable Function OnTemplateDataModeSelection(ByVal e As HierarGridTemplateDataModeSelectionEventArgs) As Boolean
            RaiseEvent TemplateDataModeSelection(Me, e)
            Return True
        End Function
#End Region

        ''' <summary>
        ''' Overriding the implementation of the DataGrid to add the additional HierarColumn 
        ''' if not already existing
        ''' </summary>
        ''' <param name="source"></param>
        ''' <param name="useDataSource"></param>
        ''' <returns></returns>
        Protected Overrides Function CreateColumnSet(ByVal source As PagedDataSource, ByVal useDataSource As Boolean) As ArrayList
            Dim al As ArrayList = MyBase.CreateColumnSet(source, useDataSource)

            _hierarColumnID = -1

            For counter As Integer = 0 To al.Count - 1
                If TypeOf al(counter) Is HierarColumn Then
                    _hierarColumnID = counter
                    Exit For
                End If
            Next

            If _hierarColumnID = -1 Then
                al.Insert(0, New HierarColumn())
                If HttpContext.Current IsNot Nothing Then
                    Me.Columns.AddAt(0, New HierarColumn())
                End If
                _hierarColumnID = 0
            End If

            _columnCount = al.Count

            Return al
        End Function

        ''' <summary>
        ''' Override handling to display the tables with a relation defined to the DataSource (aka child tables)
        ''' </summary>
        ''' <param name="e"></param>
        Protected Overrides Sub OnItemDataBound(ByVal e As DataGridItemEventArgs)
            If e.Item.ItemType = ListItemType.Item OrElse e.Item.ItemType = ListItemType.AlternatingItem OrElse e.Item.ItemType = ListItemType.SelectedItem Then
                Dim drv As DataRowView = TryCast(e.Item.DataItem, DataRowView)

                'works only with a DataTable
                If drv IsNot Nothing Then
                    DisplayRelatedTables(e.Item, drv)
                End If

                'set back the original data item
                e.Item.DataItem = drv
            End If
            MyBase.OnItemDataBound(e)
        End Sub

        ''' <summary>
        ''' Loops over all the child relations of the current table and displays for each row in each child table
        ''' the appropriate template
        ''' </summary>
        ''' <param name="item">DataGridItem that has just been databound</param>
        ''' <param name="drv">DataRowView belonging to the DataGridItem item</param>
        Protected Overridable Sub DisplayRelatedTables(ByVal item As DataGridItem, ByVal drv As DataRowView)
            Dim panel As Panel = Nothing

            Dim dataRelations As DataRelationCollection = drv.DataView.Table.ChildRelations

            If dataRelations.Count > 0 Then
                'search the reference to the panel created by the HierarColumn
                Dim dcp As DynamicControlsPlaceholder = DirectCast(item.Cells(_hierarColumnID).FindControl("DCP"), DynamicControlsPlaceholder)

                For Each dataRelation As DataRelation In dataRelations
                    Dim templateDataMode__1 As TemplateDataModes

                    'Is TemplateDataMode determined at design time or run time 
                    If TemplateDataMode = TemplateDataModes.RunTime Then
                        'Raise the SelectTemplateDataMode selection event to determine 
                        'the TemplateDataMode that this DataRelation will use at run time
                        templateDataMode__1 = GetTemplateDataMode(dataRelation)
                    Else
                        'Use the design time TemplateDataMode
                        templateDataMode__1 = TemplateDataMode
                    End If

                    If templateDataMode__1 <> TemplateDataModes.None Then
                        Dim dataRows As DataRow() = drv.Row.GetChildRows(dataRelation)

                        If dataRows.Length <> 0 Then
                            'create the panel that contains all the child templates
                            If panel Is Nothing Then
                                panel = New Panel()
                                panel.ID = "Panel"
                                dcp.Controls.Add(panel)
                                panel.Attributes.Add("style", "display:none")
                                panel.CssClass = "HierarGrid_" & item.ItemType.ToString()
                            End If

                            'either load one template for all child rows of a related table
                            If templateDataMode__1 = TemplateDataModes.Table Then
                                Dim templateFilename As String = GetTemplateFilename(dataRows(0))

                                If templateFilename <> [String].Empty Then
                                    LoadTemplateTable(panel, templateFilename, item, dataRows, dataRelation.RelationName)
                                Else
                                    panel = Nothing
                                End If
                            Else
                                'or load a template for each child row of a related table
                                For drCounter As Integer = 0 To dataRows.Length - 1
                                    Dim dataRow As DataRow = dataRows(drCounter)

                                    Dim templateFilename As String = GetTemplateFilename(dataRow)

                                    If templateFilename <> [String].Empty Then
                                        LoadTemplateSingleRow(drCounter, panel, templateFilename, item, dataRow, dataRelation.RelationName)
                                    Else
                                        panel = Nothing
                                    End If
                                Next
                            End If
                        End If
                    End If
                Next
            End If
            'if no child rows exist, hide the plus-minus icon
            If panel Is Nothing Then
                item.Cells(_hierarColumnID).FindControl("Icon").Visible = False
            End If
        End Sub

        ''' <summary>
        ''' Returns the the template data mode that should be used based on the DataRelation
        ''' via the TemplateDataModeSelection event
        ''' </summary>
        ''' <param name="dataRelation">DataRelation that generated the child rows for which the template data mode is to be determined</param>
        ''' <returns>TemplateDataMode to use for the related rows</returns>
        Protected Overridable Function GetTemplateDataMode(ByVal dataRelation As DataRelation) As TemplateDataModes
            Dim templateDataMode As TemplateDataModes

            Dim eventArgs As New HierarGridTemplateDataModeSelectionEventArgs(dataRelation)
            Dim handlerAttached As Boolean = OnTemplateDataModeSelection(eventArgs)

            If Not handlerAttached Then
                Throw New WarningException("Please use the event ""TemplateDataModeSelection"" to specify which " & "template data mode to use for a DataRelation when using ""RunTime"" TemplateDataMode")
            End If

            templateDataMode = eventArgs.TemplateDataMode

            If (templateDataMode <> TemplateDataModes.SingleRow) AndAlso (templateDataMode <> TemplateDataModes.Table) AndAlso (templateDataMode <> TemplateDataModes.None) Then
                Throw New WarningException("Please set the ""TemplateDataMode"" property of the event agruments " & "to ""TemplateDataModes.Table"", ""TemplateDataModes.SingleRow"" or ""TemplateDataModes.Table"" " & "before returning from the ""TemplateDataModeSelection"" event handler")
            End If

            Return templateDataMode
        End Function

        ''' <summary>
        ''' Returns the filename for the template that should be displayed from the cache or 
        ''' via the TemplateSelection event
        ''' </summary>
        ''' <param name="dataRow">DataRow of the child for which the template is loaded</param>
        ''' <returns>Filename of the template</returns>
        Protected Overridable Function GetTemplateFilename(ByVal dataRow As DataRow) As String
            Dim templateFilename As String
            Dim cacheKey As Object = Nothing

            If TemplateCachingBase = CachingBases.Tablename Then
                cacheKey = dataRow.Table.TableName
            ElseIf TemplateCachingBase = CachingBases.Column Then
                cacheKey = dataRow(TemplateCachingColumn)
            End If

            If cacheKey IsNot Nothing AndAlso cachingTable.Contains(cacheKey) Then
                templateFilename = DirectCast(cachingTable(cacheKey), String)
            Else
                Dim eventArgs As New HierarGridTemplateSelectionEventArgs(dataRow)
                Dim handlerAttached As Boolean = OnTemplateSelection(eventArgs)

                If Not handlerAttached Then
                    Throw New WarningException("Please use the event ""TemplateSelection"" to specify which " & "template to load for a child table/row")
                End If

                templateFilename = eventArgs.TemplateFilename

                If cacheKey IsNot Nothing Then
                    cachingTable(cacheKey) = templateFilename
                End If
            End If

            Return templateFilename
        End Function

        ''' <summary>
        ''' Loads one instance of the template for all child rows of a relation
        ''' </summary>
        ''' <param name="panel">Container in which the template is rendered</param>
        ''' <param name="templateFilename">Filename of the template</param>
        ''' <param name="item">DataGridItem that has just been databound</param>
        ''' <param name="dataRows">DataRow array of the childs that should be displayed</param>
        ''' <param name="relationName">Name of the data relation</param>
        Protected Overridable Sub LoadTemplateTable(ByVal panel As Panel, ByVal templateFilename As String, ByVal item As DataGridItem, ByVal dataRows As DataRow(), ByVal relationName As String)
            Dim ds As DataSet

            Dim drPanel As Panel = LoadTemplateIntoPanel(panel, templateFilename, "Panel_" & relationName, "ChildTemplate_" & relationName)

            'merge all the child rows into a new DataSet and perform standard databinding on the dataset
            If TypeOf Me.DataSource Is DataTable Then
                ds = DirectCast(Me.DataSource, DataTable).DataSet.Clone()
            ElseIf TypeOf Me.DataSource Is DataSet Then
                ds = DirectCast(Me.DataSource, DataSet).Clone()
            ElseIf TypeOf Me.DataSource Is DataView Then
                ds = DirectCast(Me.DataSource, DataView).Table.DataSet.Clone()
            Else
                Throw New Exception("This type of DataSource is not supported by the HierarGrid. Please contact the author of the control")
            End If

            If dataRows.Length > 0 Then
                'Bugfix (from Daniel Jant): if constraint between parent and child is enforced and only child is merged into the DataSet a constraint violation occurs
                ds.EnforceConstraints = False

                'merge the child rows into the DataSet
                ds.Merge(dataRows)

                'start the recursion for the child's child rows (thanks to Matt Petteys)
                MergeChildRows(ds, dataRows)
            End If

            item.DataItem = ds
            drPanel.DataBind()
        End Sub

        ''' <summary>
        ''' Recursive method that analyses the child table for its relations and copies the respective child rows into the DataSet (used for nested HierarGrids)
        ''' </summary>
        ''' <param name="ds">DataSet that contains the child data rows and all related rows</param>
        ''' <param name="dataRows">DataRows that are checked for child relations</param>
        Private Sub MergeChildRows(ByVal ds As DataSet, ByVal dataRows As DataRow())
            'and check for relations of the child rows (necessary for nested HierarGrids)
            For relationCounter As Integer = 0 To dataRows(0).Table.ChildRelations.Count - 1
                Dim relation As DataRelation = dataRows(0).Table.ChildRelations(relationCounter)
                For rowCounter As Integer = 0 To dataRows.Length - 1
                    ' retrieve the child rows that are related to the current record
                    Dim childRows As DataRow() = dataRows(rowCounter).GetChildRows(relation)

                    ' if there are child rows
                    If childRows.Length > 0 Then
                        ' add the child rows to the dataset
                        ds.Merge(childRows)

                        ' merge the relations of the child
                        MergeChildRows(ds, childRows)
                    End If
                Next
            Next
        End Sub

        ''' <summary>
        ''' Loads one instance of the template for each child row
        ''' </summary>
        ''' <param name="index">index of the DataRow in the Table</param>
        ''' <param name="panel">Container in which the template is rendered</param>
        ''' <param name="templateFilename">Filename of the template</param>
        ''' <param name="item">DataGridItem that has just been databound</param>
        ''' <param name="dataRow">DataRow of the child that should be displayed</param>
        ''' <param name="relationName">Name of the data relation</param>
        Protected Overridable Sub LoadTemplateSingleRow(ByVal index As Integer, ByVal panel As Panel, ByVal templateFilename As String, ByVal item As DataGridItem, ByVal dataRow As DataRow, ByVal relationName As String)
            Dim rowName As String = relationName & "_" & index

            Dim drPanel As Panel = LoadTemplateIntoPanel(panel, templateFilename, "Panel_" & rowName, "ChildTemplate_" & rowName)

            'setting the DataItem property of the current DataGridItem to a DataRowView of the current
            'child's row
            Dim view As DataView = dataRow.Table.DefaultView
            Dim enumerator As IEnumerator = view.GetEnumerator()

            'Workaround:	found no way to create a DataRowView instance from a DataRow 
            '				other than looping over the DefaultView
            While enumerator.MoveNext()
                If DirectCast(enumerator.Current, DataRowView).Row Is dataRow Then
                    Exit While
                End If
            End While

            item.DataItem = DirectCast(enumerator.Current, DataRowView)
            drPanel.DataBind()
        End Sub

        ''' <summary>
        ''' Creates a new panel and loads the Template from the ASCX file into the panel
        ''' </summary>
        ''' <param name="panel">Container in which the template is rendered</param>
        ''' <param name="templateFilename">Filename of the template</param>
        ''' <param name="panelName">ID of the Panel that is created</param>
        ''' <param name="templateName">ID of the Template that is loaded</param>
        ''' <returns>a reference to the newly created panel that contains the template</returns>
        Protected Overridable Function LoadTemplateIntoPanel(ByVal panel As Panel, ByVal templateFilename As String, ByVal panelName As String, ByVal templateName As String) As Panel
            Dim drPanel As New Panel()
            drPanel.ID = panelName
            panel.Controls.Add(drPanel)

            If LoadControlMode = LoadControlModes.Template Then
                Dim template As ITemplate = Page.LoadTemplate(templateFilename)
                template.InstantiateIn(drPanel)
                drPanel.Controls(0).ID = templateName
            Else
                Dim template As Control = Page.LoadControl(templateFilename)
                template.ID = templateName
                drPanel.Controls.Add(template)
            End If

            Return drPanel
        End Function

        ''' <summary>
        ''' Overridden to render client script from resource file
        ''' </summary>
        ''' <param name="e"></param>
        Protected Overrides Sub OnPreRender(ByVal e As EventArgs)
            MyBase.OnPreRender(e)

            'register on the page that LoadPostData is being called
            Page.RegisterRequiresPostBack(Me)

            'specifies the name of the hidden field that contains the ClientIDs of the expanded rows
            Dim hiddenFieldName As String = EXPANDEDCLIENTIDS_HIDDENFIELDNAME & Me.ClientID

            'adds an attribute to the HierarGrid itself that specifies the name of the hidden field that contains the ClientIDs of the expanded rows
            Me.Attributes.Add("ExpandedClientIDsName", hiddenFieldName)

            'adds an attribute to the HierarGrid itself that specifies the number of the columns for the colspan
            Me.Attributes.Add("ColumnCount", _columnCount.ToString())

            'register the hidden field that contains the ClientIDs of the expanded rows
            ' Page.RegisterHiddenField(hiddenFieldName, ExpandedClientIDs)
            Page.ClientScript.RegisterHiddenField(hiddenFieldName, ExpandedClientIDs)

            'register the client script from the embedded resource file (once for all HierarGrids on page)
            Page.ClientScript.RegisterClientScriptBlock(Me.GetType(), Me.ClientID & "_scriptToggleRow", My.Resources.HierarGrid.ToString())
            Page.ClientScript.RegisterStartupScript(Me.GetType(), Me.ClientID & "_Startup", My.Resources.Startup.Replace("{--HiddenFieldName--}", hiddenFieldName).ToString())

        End Sub

#Region "Implementation of IPostBackDataHandler"
        ''' <summary>
        ''' Unused in the implementation of the HierarGrid but needed according to IPostBackDataHandler
        ''' </summary>
        Public Sub RaisePostDataChangedEvent() Implements IPostBackDataHandler.RaisePostDataChangedEvent
        End Sub

        ''' <summary>
        ''' Loads the post data from the hidden field that contains the row state (expanded or collapsed)
        ''' </summary>
        ''' <param name="postDataKey">contains the control's UniqueID</param>
        ''' <param name="postCollection">Postdata</param>
        ''' <returns>always false</returns>
        Public Function LoadPostData(ByVal postDataKey As String, ByVal postCollection As System.Collections.Specialized.NameValueCollection) As Boolean Implements IPostBackDataHandler.LoadPostData
            Dim hiddenFieldName As String = EXPANDEDCLIENTIDS_HIDDENFIELDNAME & Me.ClientID

            If postCollection(hiddenFieldName) IsNot Nothing Then
                ExpandedClientIDs = postCollection(hiddenFieldName)
            End If

            Return False
        End Function
#End Region
    End Class

#Region "Enum: LoadControlModes"
    ''' <summary>
    ''' Specifies whether the template shall be loaded as a template using Page.LoadTemplate 
    ''' or as a UserControl using Page.LoadControl
    ''' </summary>
    Public Enum LoadControlModes
        ''' <summary>
        ''' Specifies that the template shall be loaded as a template using Page.LoadTemplate
        ''' </summary>
        Template
        ''' <summary>
        ''' Specifies that the template shall be loaded as a UserControl using Page.LoadControl
        ''' </summary>
        UserControl
    End Enum
#End Region

#Region "Enum: TemplateDataModes"
    ''' <summary>
    ''' Specifies whether to load one instance of the template for all child rows of a relation or to 
    ''' load one instance of the template for each child row
    ''' </summary>
    Public Enum TemplateDataModes
        ''' <summary>
        ''' Specifies that one template per table shall be loaded
        ''' </summary>
        Table
        ''' <summary>
        ''' Specifies that one template per row shall be loaded
        ''' </summary>
        SingleRow
        ''' <summary>
        ''' Specifies that the template data mode will be determined for each child relation at runtime via the TemplateDataModeSelection event
        ''' </summary>
        RunTime
        ''' <summary>
        ''' Specifies that no template shall be loaded
        ''' </summary>
        None
    End Enum
#End Region

#Region "Enum: CachingBases"
    ''' <summary>
    ''' Specifies whether the template filename shall be cached based on the name of the table of the
    ''' data of a <see cref="HierarGrid.TemplateCachingColumn">specific column</see>
    ''' </summary>
    Public Enum CachingBases
        ''' <summary>
        ''' Don't cache the filename of the template
        ''' </summary>
        None
        ''' <summary>
        ''' Cache the filename of the template based on the tablename
        ''' </summary>
        Tablename
        ''' <summary>
        ''' Cache the filename of the template based on the value in the column (specify the TemplateCachingColumn)
        ''' </summary>
        Column
    End Enum
#End Region

#Region "Class: RowStates"
    ''' <summary>
    ''' Helper class that externally looks like a collection with an indexer but stores the RowState in the 
    ''' owner's hidden text box "ExpandedClientIDs"
    ''' </summary>
    Public Class RowStates
        Private _owner As HierarGrid

        ''' <summary>
        ''' Specifies whether a Row is expanded or collapsed
        ''' </summary>
        Default Public Property Item(ByVal counter As Integer) As Boolean
            Get
                If _owner.Items.Count > counter Then
                    Dim image As Image = DirectCast(_owner.Items(counter).FindControl("Icon"), Image)
                    If image IsNot Nothing AndAlso _owner.ExpandedClientIDs <> [String].Empty Then
                        If _owner.ExpandedClientIDs.IndexOf(image.ClientID) >= 0 Then
                            Return True
                        End If
                    End If
                End If
                Return False
            End Get
            Set(ByVal value As Boolean)
                If _owner.Items.Count > counter Then
                    Dim image As Image = DirectCast(_owner.Items(counter).FindControl("Icon"), Image)
                    If image IsNot Nothing Then
                        If value = True Then
                            'add the ClientID to the hidden text field
                            If _owner.ExpandedClientIDs.IndexOf(image.ClientID) < 0 Then
                                _owner.ExpandedClientIDs += HierarGrid.EXPANDEDCLIENTIDS_SEPARATOR & image.ClientID
                            End If
                        Else
                            'remove the ClientID from the hidden text field
                            _owner.ExpandedClientIDs = _owner.ExpandedClientIDs.Replace(image.ClientID, [String].Empty)
                        End If
                    End If
                End If
            End Set
        End Property

        ''' <summary>
        ''' Constructor that sets a reference to the parent HierarGrid
        ''' </summary>
        ''' <param name="hierarGrid">Reference to the parent HierarGrid</param>
        Public Sub New(ByVal hierarGrid As HierarGrid)
            _owner = hierarGrid
        End Sub

        ''' <summary>
        ''' Collapses all the rows
        ''' </summary>
        Public Sub CollapseAll()
            SetAll(False)
        End Sub

        ''' <summary>
        ''' Expands all the rows
        ''' </summary>
        Public Sub ExpandAll()
            SetAll(True)
        End Sub

        ''' <summary>
        ''' Expands or collapses all the rows
        ''' </summary>
        ''' <param name="expanded"></param>
        Private Sub SetAll(ByVal expanded As Boolean)
            For counter As Integer = 0 To _owner.Items.Count - 1
                Me(counter) = expanded
            Next
        End Sub
    End Class
#End Region

#Region "TemplateSelection event: Delegate and EventArgs"
    ''' <summary>
    ''' Represents the method that will handle the TemplateSelection event.
    ''' </summary>
    <Serializable()> _
    Public Delegate Sub HierarGridTemplateSelectionEventHandler(ByVal sender As Object, ByVal e As HierarGridTemplateSelectionEventArgs)

    ''' <summary>
    ''' Provides data for the TemplateSelection event
    ''' </summary>
    Public Class HierarGridTemplateSelectionEventArgs
        Inherits EventArgs
        Private _row As DataRow
        Private _templateFilename As String

        ''' <summary>
        ''' Gets the row the event has been raised for
        ''' </summary>
        Public ReadOnly Property Row() As DataRow
            Get
                Return _row
            End Get
        End Property

        ''' <summary>
        ''' Set the Filename for the template that shall be loaded
        ''' </summary>
        Public Property TemplateFilename() As String
            Get
                Return _templateFilename
            End Get
            Set(ByVal value As String)
                _templateFilename = value
            End Set
        End Property

        ''' <summary>
        ''' Initializes a new instance of HierarGridTemplateSelectionEventArgs class.
        ''' </summary>
        ''' <param name="row">The row that the event was raised for</param>
        Public Sub New(ByVal row As DataRow)
            Me.New(row, [String].Empty)
        End Sub

        ''' <summary>
        ''' Initializes a new instance of HierarGridTemplateSelectionEventArgs class.
        ''' </summary>
        ''' <param name="row">The row that the event was raised for</param>
        ''' <param name="templateFilename">The filename of the template that shall be loaded</param>
        Public Sub New(ByVal row As DataRow, ByVal templateFilename As String)
            _row = row
            _templateFilename = templateFilename
        End Sub
    End Class
#End Region

#Region "TemplateDataModeSelection event: Delegate and EventArgs"
    ''' <summary>
    ''' Represents the method that will handle the TemplateDataModeSelection event.
    ''' </summary>
    <Serializable()> _
    Public Delegate Sub HierarGridTemplateDataModeSelectionEventHandler(ByVal sender As Object, ByVal e As HierarGridTemplateDataModeSelectionEventArgs)

    ''' <summary>
    ''' Provides data for the TemplateDataModeSelection event
    ''' </summary>
    Public Class HierarGridTemplateDataModeSelectionEventArgs
        Inherits EventArgs
        Private _relation As DataRelation
        Private _templateDataMode As TemplateDataModes

        ''' <summary>
        ''' Gets the DataRelation the event has been raised for
        ''' </summary>
        Public ReadOnly Property Relation() As DataRelation
            Get
                Return _relation
            End Get
        End Property

        ''' <summary>
        ''' Set the TemplateDataMode that will be use to load child rows for the DataRelation
        ''' </summary>
        Public Property TemplateDataMode() As TemplateDataModes
            Get
                Return _templateDataMode
            End Get
            Set(ByVal value As TemplateDataModes)
                _templateDataMode = value
            End Set
        End Property

        ''' <summary>
        ''' Initializes a new instance of HierarGridTemplateDataModeSelectionEventArgs class.
        ''' </summary>
        ''' <param name="relation">The DataRelation that the event was raised for</param>
        Public Sub New(ByVal relation As DataRelation)
            Me.New(relation, TemplateDataModes.RunTime)
        End Sub

        ''' <summary>
        ''' Initializes a new instance of HierarGridTemplateDataModeSelectionEventArgs class.
        ''' </summary>
        ''' <param name="relation">The DataRelation that the event was raised for</param>
        ''' <param name="templateDataMode">The the TemplateDataMode that will be use to load child rows for the DataRelation</param>
        Public Sub New(ByVal relation As DataRelation, ByVal templateDataMode As TemplateDataModes)
            _relation = relation
            _templateDataMode = templateDataMode
        End Sub
    End Class
#End Region
End Namespace
